def straightforward_divide_and_conquer_matrix_multiplication(A, B, C, n):
    if n == 1:
        C[0][0] = A[0][0] * B[0][0]
        return

    m = n // 2
    A11, A12, A21, A22 = A[:m, :m], A[:m, m:], A[m:, :m], A[m:, m:]
    B11, B12, B21, B22 = B[:m, :m], B[:m, m:], B[m:, :m], B[m:, m:]
    C11, C12, C21, C22 = C[:m, :m], C[:m, m:], C[m:, :m], C[m:, m:]

    straightforward_divide_and_conquer_matrix_multiplication(A11, B11, C11, m)
    straightforward_divide_and_conquer_matrix_multiplication(A12, B21, C11, m)
    straightforward_divide_and_conquer_matrix_multiplication(A11, B12, C12, m)
    straightforward_divide_and_conquer_matrix_multiplication(A12, B22, C12, m)
    straightforward_divide_and_conquer_matrix_multiplication(A21, B11, C21, m)
    straightforward_divide_and_conquer_matrix_multiplication(A22, B21, C21, m)
    straightforward_divide_and_conquer_matrix_multiplication(A21, B12, C22, m)
    straightforward_divide_and_conquer_matrix_multiplication(A22, B22, C22, m)

    C[:m, :m] = C11
    C[:m, m:] = C12
    C[m:, :m] = C21
    C[m:, m:] = C22
